/*
 * This file is generated by jOOQ.
 */
package com.demo.codegen.tables;


import com.demo.codegen.Keys;
import com.demo.codegen.Public;
import com.demo.codegen.tables.records.StationRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Station extends TableImpl<StationRecord> {

    private static final long serialVersionUID = -1612065463;

    /**
     * The reference instance of <code>public.station</code>
     */
    public static final Station STATION = new Station();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StationRecord> getRecordType() {
        return StationRecord.class;
    }

    /**
     * The column <code>public.station.id</code>.
     */
    public final TableField<StationRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("gen_random_uuid()", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.station.name</code>.
     */
    public final TableField<StationRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.station.task_queue</code>.
     */
    public final TableField<StationRecord, String> TASK_QUEUE = createField(DSL.name("task_queue"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.station.notify_queue</code>.
     */
    public final TableField<StationRecord, String> NOTIFY_QUEUE = createField(DSL.name("notify_queue"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.station.status</code>.
     */
    public final TableField<StationRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.station.ftp_server_id</code>.
     */
    public final TableField<StationRecord, String> FTP_SERVER_ID = createField(DSL.name("ftp_server_id"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.station.create_time</code>.
     */
    public final TableField<StationRecord, Timestamp> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>public.station</code> table reference
     */
    public Station() {
        this(DSL.name("station"), null);
    }

    /**
     * Create an aliased <code>public.station</code> table reference
     */
    public Station(String alias) {
        this(DSL.name(alias), STATION);
    }

    /**
     * Create an aliased <code>public.station</code> table reference
     */
    public Station(Name alias) {
        this(alias, STATION);
    }

    private Station(Name alias, Table<StationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Station(Name alias, Table<StationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Station(Table<O> child, ForeignKey<O, StationRecord> key) {
        super(child, key, STATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<StationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StationRecord, ?>>asList(Keys.STATION__STATION_FK);
    }

    public FtpServer ftpServer() {
        return new FtpServer(this, Keys.STATION__STATION_FK);
    }

    @Override
    public Station as(String alias) {
        return new Station(DSL.name(alias), this);
    }

    @Override
    public Station as(Name alias) {
        return new Station(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Station rename(String name) {
        return new Station(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Station rename(Name name) {
        return new Station(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, String, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
